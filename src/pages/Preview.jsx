import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { getLocations, getProject } from "../api/api";
import FormField from "../components/FormField";

/**
 * Preview Page
 *
 * This component renders a preview of the project and its locations.
 * It displays project details, participant scoring, and tracks visited locations.
 * Users can select a location to view its details, including the clue and scoring information.
 * The home screen either displays the initial clue or a list of all locations, based on the project settings.
 *
 * @Page
 * @example
 * return (
 *   <Preview />
 * )
 *
 * JSDoc comments above were generated by ChatGPT
 */
const Preview = () => {
  const { projectId } = useParams(); // Get projectId from the URL
  const [locations, setLocations] = useState([]);
  const [project, setProject] = useState(null);
  const [currentLocation, setCurrentLocation] = useState("home");
  const [visitedLocations, setVisitedLocations] = useState(new Set());
  const [error, setError] = useState(null);

  // Calculate total score based on visited locations
  const totalScore = Array.from(visitedLocations).reduce((acc, locName) => {
    const location = locations.find((loc) => loc.location_name === locName);
    return acc + (location ? location.score_points : 0);
  }, 0);

  const maxScore = locations.reduce((acc, loc) => acc + loc.score_points, 0);

  // Fetch the project details and locations when the component mounts
  useEffect(() => {
    const fetchProjectData = async () => {
      try {
        const projectData = await getProject(projectId);
        const locationsData = await getLocations(projectId);
        setProject(projectData[0]);
        setLocations(locationsData);
      } catch (err) {
        console.error("Error fetching data:", err);
        setError("Failed to load project data.");
      }
    };

    fetchProjectData();
  }, [projectId]);

  // Handle location selection from the dropdown
  const handleLocationChange = (locationName) => {
    if (locationName === "home") {
      setCurrentLocation("home");
    } else {
      const selectedLocation = locations.find(
        (loc) => loc.location_name === locationName
      );
      if (selectedLocation) {
        // If the location hasn't been visited, mark it as visited
        if (!visitedLocations.has(selectedLocation.location_name)) {
          setVisitedLocations(
            new Set(visitedLocations).add(selectedLocation.location_name)
          );
        }
        // Set the current location to the selected location object
        setCurrentLocation(selectedLocation);
      }
    }
  };

  if (error) {
    return <div className="text-cherry-dark">Error: {error}</div>;
  }

  if (!project) {
    return <div className="text-primary-dark">Loading...</div>;
  }

  return (
    <div className="container mx-auto py-8">
      <div className="mb-4">
        <FormField
          label="Select a Location"
          type="select"
          value={
            currentLocation === "home"
              ? "home"
              : currentLocation?.location_name || ""
          }
          onChange={(e) => handleLocationChange(e.target.value)}
          options={[
            { value: "home", label: "Homescreen" },
            ...locations.map((location) => ({
              value: location.location_name,
              label: location.location_name,
            })),
          ]}
          helperText="Choose a location to preview its details."
        />
      </div>

      <div className="preview-container bg-white p-6 rounded-lg shadow-lg max-w-md mx-auto">
        <h1 className="text-3xl font-bold mb-4 text-primary-dark">
          {project.title}
        </h1>
        <p className="text-gray-dark mb-4">{project.instructions}</p>

        {/* Display the initial clue or all locations based on the setting */}
        {currentLocation === "home" && (
          <>
            {project.homescreen_display === "Display initial clue" ? (
              <div>
                <h3 className="text-lg font-semibold text-primary">
                  Initial Clue
                </h3>
                <p className="text-gray-cool">{project.initial_clue}</p>
              </div>
            ) : project.homescreen_display === "Display all locations" ? (
              <div>
                <h3 className="text-lg font-semibold text-primary">
                  All Locations
                </h3>
                <ul className="text-gray-cool">
                  {locations.map((location) => (
                    <li key={location.location_name}>
                      {location.location_name} - {location.score_points} Points
                    </li>
                  ))}
                </ul>
              </div>
            ) : null}
          </>
        )}

        {currentLocation !== "home" && (
          <div className="mt-6">
            <h3 className="text-xl font-semibold mb-2 text-primary">
              Location: {currentLocation.location_name}
            </h3>
            <p className="text-gray-cool mb-2">
              Trigger: {currentLocation.location_trigger}
            </p>
            <p className="text-gray-cool mb-2">
              Position: {currentLocation.location_position}
            </p>
            <p className="text-gray-cool mb-2">
              Points: {currentLocation.score_points}
            </p>
            <h3 className="text-xl font-semibold mb-2 text-primary">
              Next Location Clue
            </h3>
            <p className="text-gray-cool mb-2">
              {currentLocation.clue || "No clue provided."}
            </p>
          </div>
        )}

        {/* Display participant scoring method */}
        <div className="mt-6">
          <h3 className="text-lg font-semibold text-primary">Scoring Method</h3>
          <p className="text-gray-cool">{project.participant_scoring}</p>
        </div>

        {/* Display the total score and visited locations */}
        <div className="mt-6">
          <h3 className="text-lg font-semibold text-primary">Your Score</h3>
          <p className="text-gray-cool">
            Total Points: {totalScore} / {maxScore}
          </p>
          <p className="text-gray-cool">
            Locations Visited: {visitedLocations.size}/{locations.length}
          </p>
        </div>
      </div>
    </div>
  );
};

export default Preview;

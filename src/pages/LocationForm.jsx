import { useState, useEffect } from "react";
import {
  createLocation,
  getLocation,
  updateLocation,
  getLocations,
} from "../api/api"; // Assume you have this API function
import FormField from "../components/FormField";
import CustomButton from "../components/CustomButton";
import { useParams, useNavigate } from "react-router-dom";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";

/**
 * LocationForm Page
 *
 * This component allows users to create or update a location within a project.
 * It includes fields for the location name, trigger, position, score points, clue, and rich text content.
 * The form uses ReactQuill for WYSIWYG editing and interacts with an API for creating or updating locations.
 * Toast notifications are used for feedback on success or failure.
 *
 * @Pages
 * @returns {JSX.Element} The rendered LocationForm component.
 *
 * @example
 * return (
 *   <LocationForm />
 * )
 *
 *  JSDoc comments above were generated by ChatGPT
 */
const LocationForm = () => {
  const { projectId, locationId } = useParams();
  const navigate = useNavigate();

  const [locationName, setLocationName] = useState("");
  const [locationTrigger, setLocationTrigger] = useState("Location Entry");
  const [locationPosition, setLocationPosition] = useState("");
  const [scorePoints, setScorePoints] = useState(0);
  const [clue, setClue] = useState("");
  const [locationContent, setLocationContent] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [existingLocations, setExistingLocations] = useState([]);

  // Fetch existing locations when the component mounts to validate uniqueness
  useEffect(() => {
    const fetchLocations = async () => {
      try {
        const locations = await getLocations(projectId);
        setExistingLocations(locations);
      } catch (err) {
        console.error("Error fetching locations:", err);
        setError("Failed to load locations.");
      }
    };

    fetchLocations();
  }, [projectId]);

  // Fetch location data if editing an existing location (locationId exists)
  useEffect(() => {
    const fetchLocation = async () => {
      if (locationId) {
        try {
          const location = await getLocation(locationId);
          setLocationName(location[0]?.location_name || "");
          setLocationTrigger(location[0]?.location_trigger || "Location Entry");
          setLocationPosition(location[0]?.location_position || "");
          setScorePoints(location[0]?.score_points || 0);
          setClue(location[0]?.clue || "");
          setLocationContent(location[0]?.location_content || "");
        } catch (err) {
          console.error("Error fetching location data:", err);
          setError("Failed to load location data.");
        }
      }
    };
    fetchLocation();
  }, [locationId]); // Runs when the component mounts or locationId changes

  // Validate form fields before submission
  const validateForm = () => {
    if (!locationName || !locationPosition || scorePoints < 0) {
      setError("All required fields must be filled out.");
      toast.warning("Please fill out all required fields.");
      return false;
    }

    return true;
  };

  // Handle form submission for creating or updating a location
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;

    // Data to be submitted to the API
    const locationData = {
      project_id: projectId,
      location_name: locationName,
      location_trigger: locationTrigger,
      location_position: locationPosition,
      score_points: scorePoints,
      clue,
      location_content: locationContent,
    };

    try {
      setLoading(true);
      setError(null);

      if (locationId) {
        // If `locationId` is present, update the existing location
        await updateLocation(locationId, locationData);
        toast.success("Location updated successfully.");
      } else {
        // If no `locationId`, create a new location
        await createLocation(locationData);
        toast.success("Location created successfully.");
      }

      // Navigate back to the project's locations list after success
      navigate(`/projects/${projectId}/locations`);
    } catch (err) {
      console.error("Error creating location:", err);
      setError("Failed to create the location. Please try again.");
      toast.error("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  // Formats supported by the ReactQuill editor
  const formats = [
    "header",
    "font",
    "list",
    "bullet",
    "bold",
    "italic",
    "underline",
    "color",
    "background",
    "align",
    "link",
    "image",
  ];

  return (
    <div className="container mx-auto py-8">
      <ToastContainer />

      <h1 className="text-3xl font-bold mb-6">Add a New Location</h1>

      {error && <div className="text-red-500 mb-4">{error}</div>}

      {/* Location form */}
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Location name */}
        <FormField
          label="Location Name"
          value={locationName}
          onChange={(e) => setLocationName(e.target.value)}
          required={true}
          maxLength={255}
          helperText="The name of the location."
        />

        {/* Form field for Location Trigger */}
        <FormField
          label="Location Trigger"
          type="select"
          value={locationTrigger}
          onChange={(e) => setLocationTrigger(e.target.value)}
          options={[
            { value: "Location Entry", label: "Location Entry" },
            { value: "QR Code Scan", label: "QR Code Scan" },
            { value: "Both Location Entry and QR Code Scan", label: "Both" },
          ]}
          required={true}
          helperText="How will this location be triggered?"
        />

        {/* Form field for Location Position */}
        <FormField
          label="Location Position (Latitude, Longitude)"
          value={locationPosition}
          onChange={(e) => setLocationPosition(e.target.value)}
          required={true}
          maxLength={100}
          helperText="Enter the latitude and longitude in this format: (27.4975,153.013276)"
        />

        {/* Form field for Score Points */}
        <FormField
          label="Score Points"
          type="number"
          value={scorePoints}
          onChange={(e) => setScorePoints(Number(e.target.value))}
          required={true}
          helperText="Points earned by reaching this location."
        />

        {/* Form field for Clue (optional) */}
        <FormField
          label="Clue (optional)"
          type="textarea"
          value={clue}
          onChange={(e) => setClue(e.target.value)}
          helperText="A clue leading to the next location."
        />

        {/* WYSIWYG Editor for Location Content */}
        <div className="mb-4">
          <label className="block text-lg font-small">Location Content</label>
          {/* Using React Quill for rich text editing
              Source: https://www.npmjs.com/package/react-quill */}
          <ReactQuill
            className="bg-white"
            theme="snow"
            value={locationContent}
            onChange={setLocationContent}
            placeholder="Enter the content for this location..."
            modules={{
              toolbar: [
                [{ header: "1" }, { header: "2" }, { font: [] }],
                [{ list: "ordered" }, { list: "bullet" }],
                ["bold", "italic", "underline"],
                [{ color: [] }, { background: [] }],
                [{ align: [] }],
                ["link", "image"],
              ],
            }}
            formats={formats}
          />
          <p className="text-sm text-gray-cool py-2">
            You can format text, add images (as base64), and more.
          </p>
        </div>

        {/* Submit Button */}
        <CustomButton
          label={loading ? "Creating..." : "Create Location"}
          className="bg-primary text-white hover:bg-primary-dark py-2 rounded-xl"
          disabled={loading}
          onClick={handleSubmit}
        />
      </form>
    </div>
  );
};

export default LocationForm;

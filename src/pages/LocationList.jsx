import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getLocations, deleteLocation, getProject } from "../api/api";
import CustomButton from "../components/CustomButton";
import QRCode from "react-qr-code";

/**
 * LocationsList Component
 *
 * This component displays a list of locations for a specific project. It allows users to view,
 * edit, and delete locations, as well as add new locations. The component fetches location data
 * and project details from the API using the projectId from the URL parameters.
 *
 * @Pages
 * @returns {JSX.Element} The rendered LocationsList component.
 *
 * @example
 * return (
 *   <LocationsList />
 * )

 * @function handleDelete
 * Deletes a location by its ID and refreshes the locations list.
 *
 * @function handleEdit
 * Navigates to the edit form for a specific location.
 * 
 * @function moveUp
 * Moves the location up in the list.
 * 
 * @function moveDown
 * Moves the location down in the list.
 *
 * JSDoc comments above were generated by ChatGPT
 */
const LocationsList = () => {
  const { projectId } = useParams(); // Get projectId from URL
  const navigate = useNavigate();
  const [locations, setLocations] = useState([]);
  const [projectName, setProjectName] = useState("");
  const [error, setError] = useState(null);

  // Fetch the list of locations and project details when component mounts or projectId changes
  useEffect(() => {
    const fetchLocations = async () => {
      try {
        const data = await getLocations(projectId);
        setLocations(data);
      } catch (err) {
        setError(err.message);
      }
    };

    const fetchProjectName = async () => {
      try {
        const project = await getProject(projectId); // Fetch the project data using projectId
        setProjectName(project[0]?.title || ""); // Assuming the project title is stored in the "title" field
      } catch (err) {
        setError(err.message);
      }
    };
    fetchLocations();
    fetchProjectName();
  }, [projectId]); // Re-run effect if projectId changes

  // Handle deleting a location by its ID
  const handleDelete = async (id) => {
    try {
      await deleteLocation(id);
      const updatedLocations = await getLocations(projectId);
      setLocations(updatedLocations);
    } catch (err) {
      setError(err.message);
    }
  };

  // Navigate to the location edit page with the selected location's data
  const handleEdit = (location) => {
    navigate(`/projects/${projectId}/locations/edit/${location.id}`, {
      state: { location },
    });
  };

  // Move the location up in the list
  const moveUp = (index) => {
    if (index === 0) return; // Already at the top
    const newLocations = [...locations];
    [newLocations[index], newLocations[index - 1]] = [
      newLocations[index - 1],
      newLocations[index],
    ];
    setLocations(newLocations);
  };

  // Move the location down in the list
  const moveDown = (index) => {
    if (index === locations.length - 1) return; // Already at the bottom
    const newLocations = [...locations];
    [newLocations[index], newLocations[index + 1]] = [
      newLocations[index + 1],
      newLocations[index],
    ];
    setLocations(newLocations);
  };

  const handlePrintQRCodes = () => {
    return window.print();
  };

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="container mx-auto py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">
          Locations for Project {projectName}
        </h1>

        <div className="flex space-x-2">
          <CustomButton
            label="Add New Location"
            to={`/projects/${projectId}/locations/new`} // Link to the new location form
            className="bg-primary text-white hover:bg-primary-dark py-2 px-5 rounded-2xl"
          />
          <CustomButton
            label="Print All QR Codes"
            onClick={handlePrintQRCodes}
            className="bg-accent text-white hover:bg-accent-dark py-2 px-5 rounded-2xl"
          />
          <CustomButton
            label="Preview Experience"
            to={`/projects/${projectId}/preview`} // Navigate to the preview page
            className="bg-forrest-bright text-white hover:bg-forrest py-2 px-5 rounded-2xl"
          />
        </div>
      </div>

      {locations.length === 0 && <p>No locations found for this project.</p>}

      {/* List of Locations */}
      <div className="space-y-4">
        {" "}
        {/* Replace grid with a vertical list */}
        {locations.map((location, index) => (
          <div
            key={location.id} // Use location ID as key for each item
            className="bg-white p-4 border border-gray-300 rounded-lg shadow-md flex justify-between items-center"
          >
            <div>
              {/* Display location details */}
              <h2 className="text-2xl font-semibold mb-2 truncate">
                {location.location_name}
              </h2>
              <p className="text-gray-600 text-sm">
                Trigger: {location.location_trigger}
              </p>
              <p className="text-gray-600 text-sm">
                Position: {location.location_position}
              </p>
              <p className="text-gray-600 text-sm">
                Points: {location.score_points}
              </p>
            </div>

            {/* Buttons for editing and deleting the location */}
            <div className="flex items-center space-x-2">
              <div className="flex space-x-2 mr-5">
                {/* Up button (only show when it is not at the top) */}
                {index !== 0 && (
                  <CustomButton
                    label="↑"
                    onClick={() => moveUp(index)}
                    className="bg-gray text-white hover:bg-gray-dark rounded-lg py-2 px-3"
                  />
                )}

                {/* Down button (only show when it is not at the bottom) */}
                {index !== locations.length - 1 && (
                  <CustomButton
                    label="↓"
                    onClick={() => moveDown(index)}
                    className="bg-gray text-white hover:bg-gray-dark rounded-xl py-2 px-3"
                  />
                )}

                {/* Edit button */}
                <CustomButton
                  label="Edit"
                  onClick={() => handleEdit(location)}
                  className="bg-accent/85 text-white hover:bg-accent-dark rounded-xl py-2"
                />
                {/* Delete button */}
                <CustomButton
                  label="Delete"
                  onClick={() => handleDelete(location.id)}
                  className="py-1 bg-cherry/85 text-white hover:bg-cherry-dark rounded-xl py-2"
                />
              </div>
              <div className="truncate">
                <QRCode value={`${projectId},${location.id}`} size={100} />
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default LocationsList;

import { useState, useEffect } from "react";
import { createProject, getProject, updateProject } from "../api/api";
import FormField from "../components/FormField";
import CustomButton from "../components/CustomButton";
import CustomToggleSwitch from "../components/CustomToggle";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useParams, useNavigate } from "react-router-dom";

/**
 * ProjectForm Component
 *
 * This component allows users to create or edit a project. It includes fields for project title,
 * description, participant scoring, instructions, and an initial clue. Users can also toggle the
 * "published" state and choose the homescreen display setting.
 *
 * @component
 * @returns {JSX.Element} The rendered ProjectForm component.
 *
 * @example
 * return (
 *   <ProjectForm />
 * )
 *
 * @function validateForm
 * Validates the form inputs. If any required fields are missing, sets the error state and shows a toast warning.
 *
 * @function handleSubmit
 * Handles form submission, including creating or updating a project. It also performs form validation
 * before making API requests.
 *
 * JSDoc comments above were generated by ChatGPT
 */
const ProjectForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [isPublished, setIsPublished] = useState(false);
  const [participantScoring, setParticipantScoring] = useState("Not Scored");
  const [instructions, setInstructions] = useState("");
  const [initialClue, setInitialClue] = useState("");
  const [homescreenDisplay, setHomescreenDisplay] = useState(
    "Display initial clue"
  );

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // Fetch the project data if `id` is provided (edit mode)
  useEffect(() => {
    const fetchProject = async () => {
      if (id) {
        try {
          const project = await getProject(id);
          // Prefill the form fields with the fetched project data
          setTitle(project[0]?.title || "");
          setDescription(project[0]?.description || "");
          setIsPublished(project[0]?.is_published || false);
          setParticipantScoring(
            project[0]?.participant_scoring || "Not Scored"
          );
          setInstructions(project[0]?.instructions || "");
          setInitialClue(project[0]?.initial_clue || "");
          setHomescreenDisplay(
            project[0]?.homescreen_display || "Display initial clue"
          );
        } catch (err) {
          console.error("Error fetching project data:", err);
          setError("Failed to load project data.");
        }
      }
    };
    fetchProject();
  }, [id]); // Runs when the component mounts or `id` changes

  const validateForm = () => {
    if (
      !title ||
      !description ||
      !participantScoring ||
      !instructions ||
      !homescreenDisplay
    ) {
      setError("All required fields must be filled out.");
      toast.warning("All required fields must be filled out.");
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); // Prevent the default form submission behavior (page reload)

    if (!validateForm()) return;

    const projectData = {
      title,
      description,
      is_published: isPublished,
      participant_scoring: participantScoring,
      instructions,
      initial_clue: initialClue,
      homescreen_display: homescreenDisplay,
    };

    try {
      setLoading(true); // Set loading state
      setError(null); // Clear any previous errors

      if (id) {
        // If `id` is present, update the existing project
        await updateProject(id, projectData);
        toast.success("Project updated successfully.");
      } else {
        // If no `id`, create a new project
        await createProject(projectData);
        toast.success("Project created successfully.");
      }

      // Navigate back to projects list after success
      navigate("/projects");
    } catch (err) {
      console.error("Error creating project:", err);
      setError("Failed to create the project. Please try again.");
      toast.error("Something went wrong. Please try again.");
    } finally {
      setLoading(false); // Turn off the loading state
    }
  };

  return (
    <div className="container mx-auto py-8">
      {/* For the notifs */}
      <ToastContainer />

      <h1 className="text-3xl font-bold mb-6">Create a New Project</h1>

      {/* Show error message if any */}
      {error && <div className="text-red-500 mb-4">{error}</div>}

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Project Title Field */}
        <FormField
          label="Project Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required={true}
          maxLength={255}
          helperText="The name of your project."
        />

        {/* Project Description Field */}
        <FormField
          label="Description"
          type="textarea"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required={true}
          helperText="Provide a brief description of your project. This is not displayed to participants."
        />

        {/* Participant Scoring Dropdown */}
        <FormField
          label="Participant Scoring"
          type="select"
          value={participantScoring}
          onChange={(e) => setParticipantScoring(e.target.value)}
          options={[
            { value: "Not Scored", label: "Not Scored" },
            {
              value: "Number of Scanned QR Codes",
              label: "Number of Scanned QR Codes",
            },
            {
              value: "Number of Locations Entered",
              label: "Number of Locations Entered",
            },
          ]}
          required={true}
          helperText="How participants will be scored."
        />

        {/* Instructions Field */}
        <FormField
          label="Instructions"
          type="textarea"
          value={instructions}
          onChange={(e) => setInstructions(e.target.value)}
          required={true}
          helperText="Instructions for participants, explaining how to engage with the project."
        />

        {/* Initial Clue Field (optional) */}
        <FormField
          label="Initial Clue (optional)"
          type="textarea"
          value={initialClue}
          onChange={(e) => setInitialClue(e.target.value)}
          helperText="The first clue to start the project. This field is optional."
        />

        {/* Homescreen Display Dropdown */}
        <FormField
          label="Homescreen Display"
          type="select"
          value={homescreenDisplay}
          onChange={(e) => setHomescreenDisplay(e.target.value)}
          options={[
            { value: "Display initial clue", label: "Display initial clue" },
            { value: "Display all locations", label: "Display all locations" },
          ]}
          required={true}
          helperText="Choose what to display on the homescreen of the project."
        />

        {/* Custom Toggle Switch for Published */}
        <CustomToggleSwitch
          label="Published"
          isActive={isPublished}
          onToggle={() => setIsPublished(!isPublished)}
        />

        {/* Submit Button */}
        <CustomButton
          label={
            loading
              ? id
                ? "Updating..."
                : "Creating..."
              : id
              ? "Update Project"
              : "Create My Project"
          }
          className="bg-primary text-white hover:bg-primary-dark"
          disabled={loading} // Disable button during loading
          onClick={handleSubmit} // Submit the form
        />
      </form>
    </div>
  );
};

export default ProjectForm;
